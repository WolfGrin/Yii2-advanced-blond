<?php

namespace common\models;

use phpDocumentor\Reflection\Types\This;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "blog".
 *
 * @property int $id
 * @property string $title
 * @property string $text
 * @property string $url
 * @property int $status_id
 * @property int $sort
 */
class Blog extends \yii\db\ActiveRecord
{
    public $newtags;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'url'], 'required'],
            [['text'], 'string'],
            [['url'], 'unique'],
            [['title', 'url'], 'string', 'max' => 150],
            [['status_id'], 'integer', 'max' => 9],
            [['sort'], 'integer', 'max' => 99, 'min' => 1],
            [['newtags'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'text' => 'Текст',
            'url' => 'ЧПУ',
            'status_id' => 'Статус',
            'sort' => 'Sort',
            'newtags' => 'Тэги',
            'tagsAsString' => 'Тэги',
            'author.username' => 'Имя автора',
            'author.email' => 'Почта автора',
        ];
    }

    public static function getStatusList()
    {
        return ['off', 'on'];
    }

    public function getStatusName()
    {
        $list = self::getStatusList();
        return $list[$this->status_id];
    }

    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function getBlogTags()
    {
        $blogTags  = $this->hasMany(BlogTag::className(), ['blog_id' => 'id']);
        return $blogTags;
    }

    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])->via('blogTags');
    }

    public function getTagsAsString()
    {
        $arr = ArrayHelper::map($this->tags, 'id', 'name');
        return implode(', ', $arr);
    }

    public function afterFind()
    {
        $this->newtags = \yii\helpers\ArrayHelper::map($this->tags, 'name', 'name');
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if(is_array($this->newtags)){
            // текущие теги в БД
            $old_tags = ArrayHelper::map($this->tags, 'name', 'id');
            foreach ($this->newtags as $one_new_tag){
                if(isset($old_tags[$one_new_tag])){
                    unset($old_tags[$one_new_tag]);
                }
                else{
                    if($tg = $this->createNewTag($one_new_tag)){
                        Yii::$app->session->addFlash('success', "добавлен тег $one_new_tag");
                    }
                    else{
                        Yii::$app->session->addFlash('error', "тег '$one_new_tag' не добавился");
                    }

                }
            }
            BlogTag::deleteAll(['and', ['blog_id' => $this->id], ['tag_id' => $old_tags]]);
        }
        else{
            BlogTag::deleteAll(['blog_id' => $this->id]);
        }
    }

    public function beforDelete()
    {
        if(parent::beforeDelete()){
            BlogTag::deleteAll(['blog_id' => $this->id]);
            return true;
        }
        else{
            return false;
        }
    }

    private function createNewTag($new_tag)
    {
        if( !$tag = Tag::find()->andWhere(['name' => $new_tag])->one() ){
            $tag = new Tag();
            $tag->name = $new_tag;
            if(!$tag->save()){
                $tag = null;
            }
        }
        if($tag instanceof Tag){
            $blog_tag = new BlogTag();
            $blog_tag->blog_id = $this->id;
            $blog_tag->tag_id = $tag->id;
            if($blog_tag->save()){
                return $blog_tag->id;
            }
        }
        return false;
    }
}
